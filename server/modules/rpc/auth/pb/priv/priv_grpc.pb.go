// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.0
// source: priv.proto

package priv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Priv_CheckTokenExpire_FullMethodName = "/priv.priv/CheckTokenExpire"
)

// PrivClient is the client API for Priv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivClient interface {
	// 检查 token 过期
	CheckTokenExpire(ctx context.Context, in *CheckTokenExpireReq, opts ...grpc.CallOption) (*CheckTokenExpireResp, error)
}

type privClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivClient(cc grpc.ClientConnInterface) PrivClient {
	return &privClient{cc}
}

func (c *privClient) CheckTokenExpire(ctx context.Context, in *CheckTokenExpireReq, opts ...grpc.CallOption) (*CheckTokenExpireResp, error) {
	out := new(CheckTokenExpireResp)
	err := c.cc.Invoke(ctx, Priv_CheckTokenExpire_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivServer is the server API for Priv service.
// All implementations must embed UnimplementedPrivServer
// for forward compatibility
type PrivServer interface {
	// 检查 token 过期
	CheckTokenExpire(context.Context, *CheckTokenExpireReq) (*CheckTokenExpireResp, error)
	mustEmbedUnimplementedPrivServer()
}

// UnimplementedPrivServer must be embedded to have forward compatible implementations.
type UnimplementedPrivServer struct {
}

func (UnimplementedPrivServer) CheckTokenExpire(context.Context, *CheckTokenExpireReq) (*CheckTokenExpireResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenExpire not implemented")
}
func (UnimplementedPrivServer) mustEmbedUnimplementedPrivServer() {}

// UnsafePrivServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivServer will
// result in compilation errors.
type UnsafePrivServer interface {
	mustEmbedUnimplementedPrivServer()
}

func RegisterPrivServer(s grpc.ServiceRegistrar, srv PrivServer) {
	s.RegisterService(&Priv_ServiceDesc, srv)
}

func _Priv_CheckTokenExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivServer).CheckTokenExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Priv_CheckTokenExpire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivServer).CheckTokenExpire(ctx, req.(*CheckTokenExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Priv_ServiceDesc is the grpc.ServiceDesc for Priv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Priv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "priv.priv",
	HandlerType: (*PrivServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTokenExpire",
			Handler:    _Priv_CheckTokenExpire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "priv.proto",
}
